 <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Image</TableHead>
            <TableHead>Name</TableHead>
            <TableHead>Author</TableHead>
            <TableHead>Category</TableHead>
            <TableHead>Price</TableHead>
            <TableHead>Quantity</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {allOrders?.data?.map((book: TBook) => (
            <TableRow key={book._id}>
              <TableCell>
                <img
                  src={book.image}
                  alt={book.name}
                  className="object-cover w-12 h-12 rounded"
                />
              </TableCell>

              {/* Name Cell */}
              <TableCell>
                {editingId === book._id ? (
                  <Input
                    value={editedData.name || ""}
                    onChange={(e) =>
                      setEditedData({ ...editedData, name: e.target.value })
                    }
                  />
                ) : (
                  book.name
                )}
              </TableCell>

              {/* Author Cell */}
              <TableCell>
                {editingId === book._id ? (
                  <Input
                    value={editedData.author || ""}
                    onChange={(e) =>
                      setEditedData({ ...editedData, author: e.target.value })
                    }
                  />
                ) : (
                  book.author
                )}
              </TableCell>

              {/* Category Cell */}
              <TableCell>
                {editingId === book._id ? (
                  <Select
                    value={editedData.category || book.category}
                    onValueChange={(value) =>
                      setEditedData({
                        ...editedData,
                        category: value as BookCategory,
                      })
                    }
                  >
                    <SelectTrigger className="w-[180px]">
                      <SelectValue placeholder="Select category" />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.values(BookCategory).map((category) => (
                        <SelectItem key={category} value={category}>
                          {category}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                ) : (
                  book.category
                )}
              </TableCell>

              {/* Price Cell */}
              <TableCell>
                {editingId === book._id ? (
                  <Input
                    type="number"
                    value={editedData.price?.toString() || ""}
                    onChange={(e) =>
                      setEditedData({
                        ...editedData,
                        price: Number(e.target.value),
                      })
                    }
                  />
                ) : (
                  `$${book.price}`
                )}
              </TableCell>

              {/* Quantity Cell */}
              <TableCell>
                {editingId === book._id ? (
                  <Input
                    type="number"
                    value={editedData.quantity?.toString() || ""}
                    onChange={(e) =>
                      setEditedData({
                        ...editedData,
                        quantity: Number(e.target.value),
                      })
                    }
                  />
                ) : (
                  book.quantity
                )}
              </TableCell>

              {/* Actions Cell */}
              <TableCell className="flex gap-2">
                <Button
                  variant="outline"
                  className={`${
                    editingId === book._id
                      ? "bg-green-600 text-white hover:bg-[#49AE93] hover:text-[#03070C]"
                      : "text-blue-600 border-blue-600 hover:bg-blue-600 hover:text-white"
                  }`}
                  onClick={() =>
                    editingId === book._id ? handleSave() : handleEdit(book)
                  }
                >
                  {editingId === book._id ? (
                    <FaSave className="mr-1" />
                  ) : (
                    <FaEdit className="mr-1" />
                  )}
                  {editingId === book._id ? "Save" : "Update"}
                </Button>

                {editingId === book._id ? (
                  <Button
                    variant="outline"
                    className="text-white bg-red-600 hover:text-[#2B2C2E] hover:bg-[#DFC9CD]"
                    onClick={() => {
                      setEditingId(null);
                      setEditedData({});
                    }}
                  >
                    <ImCancelCircle className="mr-1" /> Cancel
                  </Button>
                ) : (
                  <AlertDialog>
                    <AlertDialogTrigger asChild>
                      <Button variant="destructive">
                        <FaTrash className="mr-1" /> Delete
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent>
                      <AlertDialogHeader>
                        <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                        <p className="text-gray-600">
                          This action cannot be undone. This will permanently
                          delete the book.
                        </p>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel>Cancel</AlertDialogCancel>
                        <AlertDialogAction
                          onClick={() => handleDeleted(book._id!)}
                        >
                          Yes, Delete
                        </AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>
                )}
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>